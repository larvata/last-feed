// Generated by CoffeeScript 1.9.1
var Lastfeed, client, fs, getFeedByProviderId, parse, render, views;

parse = require('co-body');

client = require('redis').createClient();

views = require('co-views');

fs = require('mz/fs');

Lastfeed = require('../lib/lastfeed');

getFeedByProviderId = function(pid) {
  return new Promise(function(resolve, reject) {
    pid = "feed:cache:" + pid;
    return client.get(pid, function(err, reply) {
      var e, feed;
      if (err != null) {
        return reject(err);
      } else {
        if (reply != null) {
          try {
            feed = JSON.parse(reply);
            return resolve(feed);
          } catch (_error) {
            e = _error;
            return reject(e);
          }
        } else {
          return reject(new Error("Unexpected pid: " + pid));
        }
      }
    });
  });
};

render = views(__dirname + '/../feedTemplate/', {
  "default": 'jade'
});

module.exports.add = function*(next) {
  var config, lf;
  if ('POST' !== this.method) {
    (yield next);
  }
  config = (yield parse.form(this));
  config.id = config.url.replace(/^http:\/\//, '').replace(/[\/|\.]/g, '-');
  lf = new Lastfeed(config);
  client.set(lf.getConfigKey(), JSON.stringify(config));
  console.log("set config done");
  return this.body = lf.getConfigKey();
};

module.exports.get = function*(pid, next) {
  var feed;
  if ('GET' !== this.method) {
    (yield next);
  }
  console.log("provider id:" + pid);
  feed = (yield getFeedByProviderId(pid));
  this.response.type = 'application/rss+xml';
  return this.body = (yield render('ameblo', feed));
};
