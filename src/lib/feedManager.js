// Generated by CoffeeScript 1.9.1
var FeedManager, FeedParser, LastError, client, co, coreq, redis, request;

request = require('request');

coreq = require('co-request');

FeedParser = require('feedparser');

co = require('co');

redis = require('redis');

client = redis.createClient();

LastError = require('./lastError');

FeedManager = (function() {
  function FeedManager() {}

  FeedManager.prototype.setCachedFeed = function(cacheKey, feedText) {
    console.log("caching: " + cacheKey);
    return client.set(cacheKey, feedText);
  };

  FeedManager.prototype.checkFeedUpdates = function*(lastfeed) {
    var cachedFeedText, feed, feedText, feedUpdated, promiseGetCachedRawFeed, promiseGetFeed;
    promiseGetCachedRawFeed = function(lastfeed) {
      return new Promise(function(resolve, reject) {
        var feedKey;
        feedKey = lastfeed.feedRawKey;
        return client.get(feedKey, function(err, reply) {
          if (err != null) {
            console.log(err);
            return reject(new LastError("redis:error get feedRawKey", feedKey, err));
          } else {
            return resolve(reply);
          }
        });
      });
    };
    promiseGetFeed = function(lastfeed) {
      return new Promise(function(resolve, reject) {
        var feed, feedparser, req, url;
        url = lastfeed.config.url;
        console.log("request feed: " + url);
        req = request(url);
        feedparser = new FeedParser();
        feed = {};
        feed.meta = null;
        feed.articles = [];
        req.on('error', function(error) {
          return reject(new LastError("request:error", null, error));
        });
        req.on('response', function(resp) {
          if (resp.statusCode !== 200) {
            this.emit('error', new LastError("request:bad response status code", resp.statusCode));
          }
          return this.pipe(feedparser);
        });
        feedparser.on('error', function(error) {
          return reject(new LastError("feedparser:error", null, error));
        });
        feedparser.on('readable', function() {
          var post, results;
          results = [];
          while (post = this.read()) {
            results.push(feed.articles.push(post));
          }
          return results;
        });
        feedparser.on('meta', function(meta) {
          return feed.meta = meta;
        });
        return feedparser.on('end', function() {
          return resolve(feed);
        });
      });
    };
    feed = (yield promiseGetFeed(lastfeed));
    feedText = JSON.stringify(feed);
    cachedFeedText = (yield promiseGetCachedRawFeed(lastfeed));
    if (cachedFeedText === feedText) {
      feedUpdated = false;
    } else {
      feedUpdated = true;
    }
    return {
      feed: feed,
      feedUpdated: feedUpdated
    };
  };

  FeedManager.prototype.completeFeedPosts = function*(lastfeed) {
    var article, i, len, postText, postUrl, ref, resp;
    ref = lastfeed.feed.articles;
    for (i = 0, len = ref.length; i < len; i++) {
      article = ref[i];
      postUrl = article.link;
      console.log(postUrl);
      resp = (yield coreq(postUrl));
      postText = lastfeed.parser.parse(resp.body);
      article.description = postText;
    }
    return JSON.stringify(lastfeed.feed);
  };

  return FeedManager;

})();

module.exports = FeedManager;
