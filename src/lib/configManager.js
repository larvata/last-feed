// Generated by CoffeeScript 1.9.1
var ConfigManager, client, co, monitor, redis;

co = require('co');

redis = require('redis');

client = redis.createClient();

monitor = redis.createClient();

ConfigManager = (function() {
  function ConfigManager(onKeyAdded, onKeyRemoved) {
    this.onKeyAdded = onKeyAdded;
    this.onKeyRemoved = onKeyRemoved;
  }

  ConfigManager.prototype.getAllKeys = function() {
    return new Promise(function(resolve, reject) {
      return client.keys('config:*', function(err, replies) {
        if (err != null) {
          return reject(new LastError("redis:error get config:*", null, err));
        } else {
          return resolve(replies);
        }
      });
    });
  };

  ConfigManager.prototype.getByKey = function(key) {
    return new Promise(function(resolve, reject) {
      return client.get(key, function(err, reply) {
        var config, e;
        if (err != null) {
          return reject(err);
        } else {
          try {
            config = JSON.parse(reply);
            return resolve(config);
          } catch (_error) {
            e = _error;
            return reject(new LastError("JSON.parse():failed parsing " + key, reply, e));
          }
        }
      });
    });
  };

  ConfigManager.prototype.getAll = function*() {
    var configs, i, k, keys, len;
    keys = (yield this.getAllKeys());
    configs = [];
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      configs.push((yield this.getByKey(k)));
    }
    return configs;
  };

  ConfigManager.prototype.monitor = function() {
    monitor.psubscribe('*:config:*');
    return monitor.on('pmessage', (function(_this) {
      return function(pattern, channel, message) {
        var key, matchs;
        if (message !== 'del' && message !== 'set') {
          return;
        }
        matchs = channel.match(/\:(\S+)/);
        if (matchs.length !== 2) {
          console.log("error on match");
          return;
        }
        key = matchs[1];
        if (message === 'del') {
          if (_this.onKeyRemoved != null) {
            return _this.onKeyRemoved(key);
          }
        } else if (message === 'set') {
          console.log("sdt");
          return co(function*() {
            var config;
            config = (yield _this.getByKey(key));
            if (_this.onKeyAdded != null) {
              return _this.onKeyAdded(config);
            }
          });
        }
      };
    })(this));
  };

  return ConfigManager;

})();

module.exports = ConfigManager;
